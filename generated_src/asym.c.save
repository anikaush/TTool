#include <openssl/pem.h>
#include <openssl/ssl.h>
#include <openssl/rsa.h>
#include <openssl/evp.h>
#include <openssl/bio.h>
#include <openssl/err.h>
#include <stdio.h>
 
int padding = RSA_PKCS1_PADDING;
 
/*Create RSA structue to pass inside 'RSA_private_encrypt' API method*/
RSA * createRSA(unsigned char * key,int isPublic)
{
    RSA *rsa= NULL;
    BIO *keybio ;
    keybio = BIO_new_mem_buf(key, -1);
    if (keybio==NULL)
    {
        printf( "Failed to create BIO of key");
        return 0;
    }
    if(isPublic)
    {
        rsa = PEM_read_bio_RSA_PUBKEY(keybio, &rsa,NULL, NULL);
    }
    else
    {
        rsa = PEM_read_bio_RSAPrivateKey(keybio, &rsa,NULL, NULL);
    }
    if(rsa == NULL)
    {
        printf( "Failed to create RSA structure info");
    }
 
    return rsa;
}
 
/*Function to perform encryption on data*/
int private_encrypt(unsigned char * data,int data_len,unsigned char * key, unsigned char *encrypted)
{
    RSA * rsa = createRSA(key,0);
    int result = RSA_private_encrypt(data_len,data,encrypted,rsa,padding);
    return result;
}
 
/*Function to print previous error returned by the API method if any error caused*/
void printLastError(char *msg)
{
    char * err = malloc(130);;
    ERR_load_crypto_strings();
    ERR_error_string(ERR_get_error(), err);
    printf("%s ERROR: %s\n",msg, err);
    free(err);
}
 
/*main method*/
void  main(){
 
 char buff;
 char plainText[2000];
 int size;
 FILE *fp;
 
char privateKey[4096];
 
unsigned char  encrypted[4096]={};
int encrypted_length;
 
/*Reading data from file which we want to encrypt

fp = fopen(argv[1],"r");
fseek(fp,0,SEEK_END);
size= ftell(fp);
fseek(fp,0,SEEK_SET);
fread(plainText,size,1,fp);
fclose(fp);
 
/*Reading private key from file*/
 
fp = fopen("private.pem","r");
if(fp==NULL)
{
	printf("First create private key\n");
	exit(0);
}
fseek(fp,0,SEEK_END);
size= ftell(fp);
fseek(fp,0,SEEK_SET);
fread(privateKey,size,1,fp);
fclose(fp);
 
/*Calling function to encrypt the plaintext and getting output inside buffer named 'encrypted'*/
encrypted_length = private_encrypt(plainText,strlen(plainText),privateKey,encrypted);
 
if(encrypted_length == -1)
{
    printLastError("Private Encrypt failed");
    exit(0);
}
 
/*Print encrypted text on console and write it in a file named 'encData'*/
 
fp = fopen("encData","w+");
printf("Encrypted Text =%s\n",encrypted);
fwrite(encrypted,sizeof(encrypted),1,fp);
fclose(fp);
 
/*Print encrypted length of data signature on console and write it in a file named 'encDataLen'
	It can also be calculed using API function 'RSA_size(rsa)' and pasing RSA structure as argument*/
 
fp = fopen("encDataLen","w+");
printf("Encrypted length =%d\n",encrypted_length);
fwrite(&encrypted_length,sizeof(encrypted_length),1,fp);
fclose(fp);
 
}
